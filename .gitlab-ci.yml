default:
  image: node:22-alpine
  cache:
    paths:
      - node_modules/

variables:
  IMAGE: $CI_REGISTRY/$CI_PROJECT_PATH
  TAG: $CI_PIPELINE_ID
  RELEASE_NAME: erp
  NS: $RELEASE_NAME-$CI_ENVIRONMENT_NAME

workflow:
  rules:
    - if: $CI_PIPELINE_SOURCE == 'merge_request_event'
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
    - if: $CI_COMMIT_REF_PROTECTED == 'true'

stages:
  - install
  - lint
  - test
  - build
  - release
  - deploy

.release:
  stage: release
  image:
    name: docker:24.0.5
  cache: []
  before_script:
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
  script:
    - set -x
    - >
      docker buildx build
      --target $TARGET
      --file ./Dockerfile
      --push
      --tag $IMAGE/$APP/${CI_ENVIRONMENT_NAME}:$TAG
      --tag $IMAGE/$APP/${CI_ENVIRONMENT_NAME}:latest
      .

.deploy:
  stage: deploy
  image:
    name: registry.dreamkas.ru/infra/helm-deployer:latest
    entrypoint: ['']
  before_script:
    - export KUBECONFIG=$(mktemp)
    - echo $KUBECONFIG_B64 | base64 -d > $KUBECONFIG
    # Setup GPG for Helm secrets
    - gpg --allow-secret-key-import --import $HELM_SECRET
  script:
    - cd .deploy/helm
    - set -x
    - helm secrets upgrade -i $RELEASE_NAME ./
      -n $NS
      --create-namespace
      --set "cron.image.repository=$IMAGE/cron/${CI_ENVIRONMENT_NAME}"
      --set "cron.image.tag=$TAG"
      --set "erp.image.repository=$IMAGE/erp/${CI_ENVIRONMENT_NAME},erp.image.tag=$TAG"
      --set "erp.ingress.hosts[0].host=${CI_ENVIRONMENT_URL}"
      --set "erp.ingress.hosts[0].paths[0].path=/"
      --set "erp.ingress.tls[0].secretName=${CI_ENVIRONMENT_URL}-tls"
      --set "erp.ingress.tls[0].hosts[0]=${CI_ENVIRONMENT_URL}"
      --set "erp.ingress.hosts[0].paths[0].pathType=ImplementationSpecific"
      --set "erp.migrations.image.repository=$IMAGE/migrations-prod/${CI_ENVIRONMENT_NAME}"
      --set "erp.migrations.image.tag=$TAG"
      -f values.${CI_ENVIRONMENT_NAME}.yaml
      -f secrets.${CI_ENVIRONMENT_NAME}.yaml
      --atomic

install:
  stage: install
  script:
    - yarn
  rules:
    - if: $CI_COMMIT_TAG
      when: never
    - if: $CI_COMMIT_REF_PROTECTED == 'false'

lint:
  stage: lint
  script:
    - yarn lint
  rules:
    - if: $CI_COMMIT_TAG
      when: never
    - if: $CI_COMMIT_REF_PROTECTED == 'false'

test:unit:
  stage: test
  script:
    - yarn test --ci --reporters=default --reporters=jest-junit --coverage
  coverage: /All files[^|]*\|[^|]*\s+([\d\.]+)/
  rules:
    - if: $CI_COMMIT_TAG
      when: never
    - if: $CI_COMMIT_REF_PROTECTED == 'false'
  artifacts:
    when: always
    reports:
      coverage_report:
        coverage_format: cobertura
        path: coverage/cobertura-coverage.xml
      junit:
        - junit.xml

#test:e2e:
#  stage: test
#  script:
#    - yarn test:e2e --ci --reporters=default --reporters=jest-junit
#  rules:
#    - if: $CI_COMMIT_TAG
#      when: never
#    - if: $CI_COMMIT_REF_PROTECTED == 'false'
#  artifacts:
#    when: always
#    reports:
#      junit:
#        - junit.xml

build:
  stage: build
  script:
    - yarn build
  rules:
    - if: $CI_COMMIT_TAG
      when: never
    - if: $CI_COMMIT_REF_PROTECTED == 'false'

release:app-dev:
  extends: .release
  environment:
    name: dev
  variables:
    TARGET: dev
    APP: erp
  rules:
    - if: $CI_COMMIT_TAG
      when: never
    - if: $CI_COMMIT_BRANCH == 'development'

release:cron-dev:
  extends: .release
  environment:
    name: dev
  variables:
    TARGET: cron-dev
    APP: cron
  rules:
    - if: $CI_COMMIT_TAG
      when: never
    - if: $CI_COMMIT_BRANCH == 'development'

deploy:dev:
  extends: .deploy
  stage: deploy
  environment:
    name: dev
    url: erp.dev.welcome.club
  cache: []
  rules:
    - if: $CI_COMMIT_TAG
      when: never
    - if: $CI_COMMIT_BRANCH == 'development'

release:app-prod:
  extends: .release
  environment:
    name: prod
  variables:
    TARGET: prod
    APP: erp
  rules:
    - if: $CI_COMMIT_TAG
      when: never
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH

release:cron-prod:
  extends: .release
  environment:
    name: prod
  variables:
    TARGET: cron-prod
    APP: cron
  rules:
    - if: $CI_COMMIT_TAG
      when: never
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH

release:migrations-prod:
  extends: .release
  environment:
    name: prod
  variables:
    TARGET: migrations
    APP: migrations-prod
  rules:
    - if: $CI_COMMIT_TAG
      when: never
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH

deploy:prod:
  extends: .deploy
  stage: deploy
  environment:
    name: prod
    url: erp.welcome.club
  cache: []
  rules:
    - if: $CI_COMMIT_TAG
      when: never
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
